/************************************************
 * AccessGroupUserSelect.js
 * Created at 2020. 3. 23. 오후 7:53:05.
 *
 * @author joymrk
 ************************************************/

var dataManager = cpr.core.Module.require("lib/DataManager");

var comLib;
var pageRowCount = 100;
var numberPerReq = 5000;
var selectType = "all";  
var selectIDMap;

/*
 * Body에서 load 이벤트 발생 시 호출.
 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
 */
function onBodyLoad(/* cpr.events.CEvent */ e){
	selectIDMap = new Map();
	comLib = createComUtil(app);
	dataManager = getDataManager();
	
	var udcUserSelectList = app.lookup("AUSSEL_udcUserSelectList");
	udcUserSelectList.deleteColumn([14,13,12,11,10,9,8,7,6,5,4]); //APBZone,FaceIdentify...
	udcUserSelectList.setPaging(0,numberPerReq,5);		
	udcUserSelectList.redraw();	
	
	var UserAccessGroup = app.lookup("AUSSEL_udcUserAccessGroup");	
	UserAccessGroup.setPageRowCount(pageRowCount);
	UserAccessGroup.deleteUserColumn([14,13,12,11,10,9,8,7,6,5,4]);
	UserAccessGroup.hideUserButtons();
	var dsAccessGroupList = dataManager.getAccessGroup();
	UserAccessGroup.setAccessGroupList(dsAccessGroupList);	
	UserAccessGroup.setSelectedAccessGroup(0);
	UserAccessGroup.search();	
}

		
	

/*
 * Body에서 unload 이벤트 발생 시 호출.
 * 앱이 언로드된 후 발생하는 이벤트입니다.
 */
function onBodyUnload(/* cpr.events.CEvent */ e){
	var dsUserList = app.lookup("UserList");
	if(dsUserList){
		dsUserList.clear();
	}	
	var dsUserSelectList = app.lookup("UserSelectList");
	if(dsUserSelectList){
		dsUserSelectList.clear();
	}	
}

function onRefreshUserSelectCount()	{
	var dsUserSelectList = app.lookup("UserSelectList");
	var totalCount = dsUserSelectList.getRowCount();
	app.lookup("AUSSEL_optUserSelectTotal").value = totalCount+" Users";
	
}
	
/*
 * 사용자 정의 컨트롤에서 userListDblclickAccessGroup 이벤트 발생 시 호출.
 */
function onAUSSEL_udcUserAccessGroupUserListDblclickAccessGroup(/* cpr.events.CUIEvent */ e){
	/** 
	 * @type udc.grid.gridAccessGroupUser
	 */
	var aUSSEL_udcUserAccessGroup = e.control;
	var rowData = e.row.getRowData();
	var dsUserSelectList = app.lookup("UserSelectList");
	
	var udcUserListAccessGroup = app.lookup("AUSSEL_udcUserAccessGroup");
				
	var userID = rowData["ID"];
	if( selectIDMap.get(userID) == undefined ){				
		dsUserSelectList.addRowData(rowData);
		
		selectIDMap.set(userID,1);
		udcUserListAccessGroup.deleteUserRow(e.row.getIndex());
	}	
	onRefreshUserSelectCount();
	dsUserSelectList.setSort("ID");
	var selectTotal = dsUserSelectList.getRowCount();
	var udcUserSelectList = app.lookup("AUSSEL_udcUserSelectList");
	udcUserSelectList.setTotalCount(selectTotal);
		
	udcUserSelectList.setPaging(selectTotal, pageRowCount, 5);
	var readCount = (pageRowCount-1>selectTotal)?selectTotal-1:pageRowCount-1;	
	
	var pageidx = udcUserSelectList.getCurrentPageIndex();
	var start = (pageidx-1)*pageRowCount;
	var end = pageidx*pageRowCount-1;
	if ( end >= dsUserSelectList.getRowCount() ){
		end = dsUserSelectList.getRowCount()-1;
	}
	udcUserSelectList.setUserListRows(dsUserSelectList.getRowDataRanged(start, end));
}

/*
 * ">" 버튼(AUSSEL_btnAdd)에서 click 이벤트 발생 시 호출.
 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
 */
function onAUSSEL_btnAddClick(/* cpr.events.CMouseEvent */ e){
	/** 
	 * @type cpr.controls.Button
	 */
	var aUSSEL_btnAdd = e.control;
	var dsUserSelectList = app.lookup("UserSelectList");
	var udcUserAccessGroup = app.lookup("AUSSEL_udcUserAccessGroup");
	var checkedIndices = udcUserAccessGroup.getUserCheckedRowIndices();
	checkedIndices.forEach(function(index){
		var rowData = udcUserAccessGroup.getUserRowData(index);		
		var userID = rowData["ID"];
		var userName = rowData["Name"];
		
		if( selectIDMap.get(userID) == undefined ){				
			dsUserSelectList.addRowData(rowData);
			
			selectIDMap.set(userID,userName);
			udcUserAccessGroup.deleteUserRow(index);
		}
		
	});
	onRefreshUserSelectCount();
	dsUserSelectList.setSort("ID");
	
	var selectTotal = dsUserSelectList.getRowCount();
	var udcUserSelectList = app.lookup("AUSSEL_udcUserSelectList");
	udcUserSelectList.setTotalCount(selectTotal);
	
	udcUserSelectList.setPaging(selectTotal, pageRowCount, 5);
	var readCount = (pageRowCount-1>selectTotal)?selectTotal-1:pageRowCount-1;	
	var pageidx = udcUserSelectList.getCurrentPageIndex();
	var start = (pageidx-1)*pageRowCount;
	var end = pageidx*pageRowCount-1;
	if ( end >= dsUserSelectList.getRowCount() ){
		end = dsUserSelectList.getRowCount()-1;
	}
	udcUserSelectList.setUserListRows(dsUserSelectList.getRowDataRanged(start, end));
}


/*
 * "<" 버튼(AUSSEL_btnRemove)에서 click 이벤트 발생 시 호출.
 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
 */
function onAUSSEL_btnRemoveClick(/* cpr.events.CMouseEvent */ e){
	/** 
	 * @type cpr.controls.Button
	 */
	var aUSSEL_btnRemove = e.control;
	var dsUserSelectList = app.lookup("UserSelectList");
	
	var udcUserSelectList = app.lookup("AUSSEL_udcUserSelectList");
	var checkedIndices = udcUserSelectList.getCheckedRowIndices()
	var idList = [];
	checkedIndices.forEach(function(index){
		var row = udcUserSelectList.getRow(index);		
		var userID = row.getValue("ID");
		
		selectIDMap.delete(userID);
		idList.push(userID);
	});
		
	idList.forEach(function(userID){						
		var delRow = dsUserSelectList.findFirstRow("ID == "+userID)
		dsUserSelectList.realDeleteRow(delRow.getIndex());
	});
			
	var selectTotal = dsUserSelectList.getRowCount();
	var udcUserSelectList = app.lookup("AUSSEL_udcUserSelectList");
	udcUserSelectList.setTotalCount(selectTotal);
		
	udcUserSelectList.setPaging(selectTotal, pageRowCount, 5);
	var readCount = (pageRowCount-1>selectTotal)?selectTotal-1:pageRowCount-1;	
	
	var pageidx = udcUserSelectList.getCurrentPageIndex();
	var start = (pageidx-1)*pageRowCount;
	var end = pageidx*pageRowCount-1;
	if ( end >= dsUserSelectList.getRowCount() ){
		end = dsUserSelectList.getRowCount()-1;
	}
	
	udcUserSelectList.setUserListRows(dsUserSelectList.getRowDataRanged(start, end));
	
	onRefreshUserSelectCount();
	onUpdateSrcUserListState();	
}
function onUpdateSrcUserListState(){

	var udcUserListGroup = app.lookup("AUSSEL_udcUserAccessGroup");	
	udcUserListGroup.refreshUserList(selectIDMap);
}

/*
 * 사용자 정의 컨트롤에서 userListDblclick 이벤트 발생 시 호출.
 */
function onAUSSEL_udcUserSelectListUserListDblclick(/* cpr.events.CGridEvent */ e){
	/** 
	 * @type udc.grid.userList
	 */
	var aUSSEL_udcUserSelectList = e.control;
	var dsUserSelectList = app.lookup("UserSelectList");
	
	var udcUserSelectList = app.lookup("AUSSEL_udcUserSelectList");
	
	var rowData = e.row.getRowData();				
	var userID = rowData["ID"];
		
	selectIDMap.delete(userID);
							
	var delRow = dsUserSelectList.findFirstRow("ID == "+userID)
	dsUserSelectList.realDeleteRow(delRow.getIndex());
	
	udcUserSelectList.setUserList(dsUserSelectList);
			
	var selectTotal = dsUserSelectList.getRowCount();
	var udcUserSelectList = app.lookup("AUSSEL_udcUserSelectList");
	udcUserSelectList.setTotalCount(selectTotal);
		
	udcUserSelectList.setPaging(selectTotal, pageRowCount, 5);
	var readCount = (pageRowCount-1>selectTotal)?selectTotal-1:pageRowCount-1;	
	
	var pageidx = udcUserSelectList.getCurrentPageIndex();
	var start = (pageidx-1)*pageRowCount;
	var end = pageidx*pageRowCount-1;
	if ( end >= dsUserSelectList.getRowCount() ){
		end = dsUserSelectList.getRowCount()-1;
	}
	
	udcUserSelectList.setUserListRows(dsUserSelectList.getRowDataRanged(start, end));
	
	onRefreshUserSelectCount();
	onUpdateSrcUserListState();	
}

var userSelectOffset;
/*
 * ">>" 버튼(AUSSEL_btnAddAll)에서 click 이벤트 발생 시 호출.
 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
 */
function onAUSSEL_btnAddAllClick(/* cpr.events.CMouseEvent */ e){
	/** 
	 * @type cpr.controls.Button
	 */
	var aUSSEL_btnAddAll = e.control;
	userSelectOffset = 0;
		
	var udcUserListGroup = app.lookup("AUSSEL_udcUserAccessGroup");	
	var totalCount = udcUserListGroup.getTotalCount();
	
	comLib.showLoadMask("pro",dataManager.getString("Str_UserSelect"),"",totalCount/numberPerReq);
	
	sendUserListRequestAll();
}

function sendUserListRequestAll() {
	var udcUserListAccessGroup = app.lookup("AUSSEL_udcUserAccessGroup");	
	var accessgroup = udcUserListAccessGroup.getSelectedAccessGroup();

	//var smsGetUserList = app.lookup("sms_getUserListAll"); 서브미션 재사용시 오류 발생. eXBuilder 버그
	var smsGetUserList = new cpr.protocols.Submission("sms_getUserListAll");
	smsGetUserList.method = "GET";
	smsGetUserList.mediaType = "application/x-www-form-urlencoded";
	smsGetUserList.action = "/v1/users";
		
	smsGetUserList.addResponseData(app.lookup("Result"));
	smsGetUserList.addResponseData(app.lookup("Total"));
	smsGetUserList.addResponseData(app.lookup("UserList"));
		
	smsGetUserList.addEventListenerOnce("submit-done", onSmsgetUserListAllSubmitDone);
	smsGetUserList.addEventListenerOnce("submit-error", onSmsgetUserListAllSubmitError);
	smsGetUserList.addEventListenerOnce("submit-timeout", onSmsgetUserListAllSubmitTimeout);
	
	// 검색 조건 세팅	
	smsGetUserList.setParameters("searchKeyword", udcUserListAccessGroup.searchKeyword);
	if (udcUserListAccessGroup.searchKeyword != undefined && udcUserListAccessGroup.searchKeyword.length > 0) {
		smsGetUserList.setParameters("searchCategory", udcUserListAccessGroup.searchCategory);
	} else {
		smsGetUserList.setParameters("searchCategory", "");
	}
	if (accessgroup != undefined && accessgroup.value != "") {
		smsGetUserList.setParameters("accessGroupID", parseInt(accessgroup.value, 10));
	} else {
		smsGetUserList.setParameters("accessGroupID", 0);
	}
	smsGetUserList.setParameters("subInclude", "false");
	smsGetUserList.setParameters("excludeGroup", -1);

	// 페이징 계산하여 요청
	smsGetUserList.setParameters("offset", userSelectOffset);
	smsGetUserList.setParameters("limit", numberPerReq);
		
	userSelectOffset += numberPerReq;
	
	var fields = ["user_id","name"];
	smsGetUserList.setParameters("fields", fields);	
	smsGetUserList.send();
}


/*
 * 서브미션에서 submit-done 이벤트 발생 시 호출.
 * 응답처리가 모두 종료되면 발생합니다.
 */
function onSms_getUserListAllSubmitDone(/* cpr.events.CSubmissionEvent */ e){
	/** 
	 * @type cpr.protocols.Submission
	 */
	var sms_getUserListAll = e.control;
	
	var dmTotal = app.lookup("Total");
	var totalCount = parseInt(dmTotal.getValue("Count"));
	
	var dsUserSelectList = app.lookup("UserSelectList");
	var dsUserList = app.lookup("UserList");
	
	var recvCount = dsUserList.getRowCount();
	for( var i=0; i < recvCount; i++ ){
		var row = dsUserList.getRow(i);
		var userID = row.getValue("ID");
		
		if( selectIDMap.get(userID) == undefined ){				
			dsUserSelectList.addRowData(row.getRowData());
			selectIDMap.set(userID,1);
		}
	}
	
	if( userSelectOffset < totalCount ){
		//console.log("done : offset "+userSelectOffset);
		
		var msg = "사용자 목록 가져오기 "+userSelectOffset+"/"+totalCount;
		comLib.updateLoadMask(msg);
	
		sendUserListRequestAll();
	} else {
		//console.log("done : finalize ");
		comLib.hideLoadMask();
				
		dsUserSelectList.setSort("ID");
		var selectTotal = dsUserSelectList.getRowCount();
		
		var udcUserSelectList = app.lookup("AUSSEL_udcUserSelectList");
		udcUserSelectList.setTotalCount(selectTotal);
		udcUserSelectList.setCurrentPageIndex(1);
		udcUserSelectList.setPaging(selectTotal, pageRowCount, 5);
		
		var end = pageRowCount-1;
		if ( end >= dsUserSelectList.getRowCount() ){
			end = dsUserSelectList.getRowCount()-1;
		}
		
		udcUserSelectList.setUserListRows(dsUserSelectList.getRowDataRanged(0, end));		
		
		onRefreshUserSelectCount();
		onUpdateSrcUserListState();
	}
}

/*
 * 서브미션에서 submit-success 이벤트 발생 시 호출.
 * 통신이 성공하면 발생합니다.
 */
function onSms_getUserListAllSubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
	/** 
	 * @type cpr.protocols.Submission
	 */
	var sms_getUserListAll = e.control;
	
}

/*
 * 서브미션에서 submit-error 이벤트 발생 시 호출.
 * 통신 중 문제가 생기면 발생합니다.
 */
function onSms_getUserListAllSubmitError(/* cpr.events.CSubmissionEvent */ e){
	/** 
	 * @type cpr.protocols.Submission
	 */
	var sms_getUserListAll = e.control;
	comLib.hideLoadMask();	
}

/*
 * 서브미션에서 submit-timeout 이벤트 발생 시 호출.
 * 통신 중 Timeout이 발생했을 때 호출되는 이벤트입니다.
 */
function onSms_getUserListAllSubmitTimeout(/* cpr.events.CSubmissionEvent */ e){
	/** 
	 * @type cpr.protocols.Submission
	 */
	var sms_getUserListAll = e.control;
	comLib.hideLoadMask();		
}


/*
 * "<<" 버튼(AUSSEL_btnRemoveAll)에서 click 이벤트 발생 시 호출.
 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
 */
function onAUSSEL_btnRemoveAllClick(/* cpr.events.CMouseEvent */ e){
	/** 
	 * @type cpr.controls.Button
	 */
	var aUSSEL_btnRemoveAll = e.control;
	selectIDMap.forEach(function(value,key){	
      selectIDMap.delete(key);
	});
	var dsUserSelectList = app.lookup("UserSelectList");
	dsUserSelectList.clear();
		
	var udcUserSelectList = app.lookup("AUSSEL_udcUserSelectList");
	udcUserSelectList.clearUserList();
	
	onRefreshUserSelectCount();	
	onUpdateSrcUserListState();	
}
	
	

/*
 * 사용자 정의 컨트롤에서 pagechange 이벤트 발생 시 호출.
 */
function onAUSSEL_udcUserSelectListPagechange(/* cpr.events.CSelectionEvent */ e){
	/** 
	 * @type udc.grid.userList
	 */
	var aUSSEL_udcUserSelectList = e.control;
	
	var pageidx = aUSSEL_udcUserSelectList.getCurrentPageIndex();
	
	var dsUserSelectList = app.lookup("UserSelectList");
	var udcUserSelectList = app.lookup("AUSSEL_udcUserSelectList");
	
	var start = (pageidx-1)*pageRowCount;
	var end = pageidx*pageRowCount-1;
	if ( end >= dsUserSelectList.getRowCount() ){
		end = dsUserSelectList.getRowCount()-1;
	}
		
	udcUserSelectList.setUserListRows(dsUserSelectList.getRowDataRanged(start, end));
}

function onUpdateSrcUserListState(){

	var udcUserListAccessGroup = app.lookup("AUSSEL_udcUserAccessGroup");	
	udcUserListAccessGroup.refreshUserList(selectIDMap);
}
/*
 * 사용자 정의 컨트롤에서 userListUpdateAccessGroup 이벤트 발생 시 호출.
 */
function onAUSSEL_udcUserAccessGroupUserListUpdateAccessGroup(/* cpr.events.CUIEvent */ e){
	/** 
	 * @type udc.grid.gridAccessGroupUser
	 */
	var aUSSEL_udcUserAccessGroup = e.control;
	onUpdateSrcUserListState();	
}

/*
 * 버튼(AUSSEL_btnApply)에서 click 이벤트 발생 시 호출.
 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
 */
function onAUSSEL_btnApplyClick(/* cpr.events.CMouseEvent */ e){
	/** 
	 * @type cpr.controls.Button
	 */
	var aUSSEL_btnApply = e.control;
	app.close(selectIDMap);
}
